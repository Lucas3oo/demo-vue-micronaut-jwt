micronaut:
  application:
    name: DemoApplication

  # server static content from folder called 'public' in the JAR
  router.static-resources.default:
    enabled: true
    paths: "classpath:public"
    mapping: "/**"    

  server:
    port: 8082
    cors:
      enabled: true # so that the static resources can be served from another origin  
      
  security:
    authentication: idtoken 
    oauth2:
      clients:
        my-okta-app: # The provider identifier 
          client-id: 0oa8kdpoqrDslugRn5d7  # generated by Okta, TODO is it really used by Micronaut???
          openid:
            issuer: https://dev-73627270.okta.com/oauth2/default
    endpoints:
      logout:
        enabled: true
        get-allowed: true       



    
datasources:
  default:
    url: jdbc:h2:mem:devDb;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: ''
    driverClassName: org.h2.Driver
    schema-generate: CREATE_DROP
    dialect: H2
    
    
#datasources:
#  default:
#    url: jdbc:mysql://localhost:3306/app-db
#    username: app-db-user
#    password: 'my-password'
#    driverClassName: com.mysql.cj.jdbc.Driver
#    schema-generate: CREATE
#    db-type: mysql
#    dialect: org.hibernate.dialect.MySQL8Dialect
    #hikari
#    leakDetectionThreshold: 20000 # Warn when a connections is kept out of the pool for more than 20 seconds.
#    pool-name: hikari-read-write
#    maximum-pool-size: 10
#    read-only: false
#    data-source-properties:
#      cachePrepStmts: true
#      enabledTLSProtocols: TLSv1.2
#      prepStmtCacheSize: 250
#      prepStmtCacheSqlLimit: 2048
#      requireSSL: true
#      useSSL: true
#      useServerPrepStmts: true
#      verifyServerCertificate: false


jpa:
  default:
    entity-scan:
      packages: com.example.demo.book
    properties:
      hibernate:
        hbm2ddl:
          auto: update
        show_sql: false
        format_sql: true
    
    

netty:
  default:
    allocator:
      max-order: 3
