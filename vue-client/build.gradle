plugins {
    id 'base'
    id "com.github.node-gradle.node" version "3.2.1"
}


node {
  // Version of node to use.
  version = '19.6.1'

  // Version of npm to use.
  npmVersion = '9.4.0'

  // Base URL for fetching node distributions (change if you have a mirror).
  // Setting this to null as a workaround for insecure protocol until bugfix in plugin
  // See: https://issueexplorer.com/issue/node-gradle/gradle-node-plugin/163
  distBaseUrl = null

  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = true

  // The directory where Node.js is unpacked (when download is true)
  workDir = rootProject.file('.gradle/nodejs')

  // The directory where npm is installed (when a specific version is defined)
  npmWorkDir = rootProject.file('.gradle/npm')

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}")
}

npmInstall {
  args = ['--ignore-scripts', '--no-fund', '--no-audit']
}
npm_run_build {
  inputs.files (fileTree('projects'),fileTree('src'),'package.json','package-lock.json')
  outputs.dirs ('dist')
}
npm_run_build.dependsOn npmInstall

// start the node server by ../gradlew npm_start
// or ./gradlew web:npm_start in the root folder
// run test by ../gradlew npm_test

// to use the ng "watch" feature run
// ./gradlew web:npm_run_watch-all
// then you can reload the app started from spring instead and get the latest changes you have done.
// wait for Compilation complete. Watching for file changes...
// and then refresh the dist folder in Eclipse


task packageSpaApp(type: org.gradle.api.tasks.bundling.Zip) {
  dependsOn npm_run_build
  archiveBaseName = 'spa-web'
  archiveExtension = 'jar'
  destinationDirectory = file("${projectDir}/build/packageSpaApp")
  from('dist/app') {
    // optional path under which output will be visible in Java classpath, e.g. static resources path
    into 'public'
  }
}
configurations {
  npmResources
}
configurations.default.extendsFrom(configurations.npmResources)
artifacts {
  npmResources(packageSpaApp.archivePath) {
    builtBy packageSpaApp
    type 'jar'
  }
}
assemble.dependsOn(packageSpaApp)


clean {
  delete 'build'
  delete 'dist'
  delete 'coverage'
}


// due to https://github.com/gradle/gradle/issues/2488
build.mustRunAfter clean
assemble.mustRunAfter clean
npm_run_build.mustRunAfter clean
packageSpaApp.mustRunAfter clean
npmInstall.mustRunAfter clean


